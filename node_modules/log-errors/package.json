{
  "name": "log-errors",
  "version": "4.1.0",
  "license": "BSD",
  "description": "environment aware error logger that can easily be plugged into express.js",
  "tags": [
    "log",
    "logger",
    "express",
    "expressjs",
    "express-log",
    "log-errors",
    "errors"
  ],
  "author": {
    "name": "Andrew Griffiths",
    "email": "mail@andrewgriffithsonline.com"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:techjacker/log-errors.git"
  },
  "engines": [
    "node >= 0.6.0"
  ],
  "main": "index.js",
  "scripts": {
    "test": "tap ./test"
  },
  "dependencies": {
    "underscore": ">=1.4",
    "log": ">=1.4.0"
  },
  "devDependencies": {
    "tap": ">=0.4"
  },
  "readme": "# Log Errors\n\n[![Build Status](https://secure.travis-ci.org/techjacker/log-errors.png)](http://travis-ci.org/techjacker/log-errors)\n\n- logs errors based on environment\n    - development gets full color-coded errors\n    - production error logs use syslog error headings so they will be picked up by logwatch et al\n    - production only logs serious errors (level 3 and below) to reduce noise\n- request attrs logged if passed request object\n- response returned if passed response object\n\n## Quickstart\n\n```JavaScript\nvar\tlogErrors \t= require('log-errors'),\n\tlogProd \t= logErrors.production,\n\tlogDev \t\t= logErrors.development;\n\ntry {\n\tthrow new error(\"funky\");\n} catch (e) {\n\tlogDev(e);\n}\n```\n\nThis will output in colored text:\n\n```Shell\nError name: Error\n\nError object:\n\n{  \tError: \t\tfunky,\n   \tmessage: \t'funky',\n   \ttype: \t\tundefined,\n   \tstack:  \tGetter/Setter,\n   \targuments: \tundefined }\n\nStack trace:\n\n'Error: funky\n    at Object.<anonymous> (/home/andy/lib/modules/npm/log-errors/lib/development.js:16:12)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Module.runMain (module.js:492:10)\n    at process.startup.processNextTick.process._tickCallback (node.js:244:9)'\n```\n\n### Using in Express.js\n\nIt will also log request url + query info.\n\n```JavaScript\nvar\tlogErrors \t= require('log-errors'),\n\tlogProd \t= logErrors.production,\n\tlogDev \t\t= logErrors.development;\n\n\n// add this at very bottom (below all route handlers)\n// it is designed to catch the errors passed by next(err) calls\n\napp.configure('production', function() {\n\tapp.use(logProd);\n});\n\napp.configure('development', function() {\n\tapp.use(logDev);\n\t// equates to:\n\t// app.use(function(err, req, res, next) {\n\t\t// logDev(err, req, res, next);\n\t// });\n});\n```\n\nExample Output:\n\n```Shell\nError name: Error\n\nRequest:\n\nurl: someurl\nquery: ?some=random&query=params\n\nError object:\n\n{  \tError: \t\tfunky,\n   \tmessage: \t'funky',\n   \ttype: \t\tundefined,\n   \tstack:  \tGetter/Setter,\n   \targuments: \tundefined }\n\nStack trace:\n\n'Error: funky\n    at Object.<anonymous> (/home/andy/lib/modules/npm/log-errors/lib/development.js:16:12)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Module.runMain (module.js:492:10)\n    at process.startup.processNextTick.process._tickCallback (node.js:244:9)'\n```\n\n## Docs\n\n#### Info printed to STDOUT\n1. error name: (err.name)\n2. error message (err.message)\n3. error logLevel (err.logLevel)\n4. error responseCode (err.resCode)\n5. request url (req.url)\n6. request query (req.query)\n\n\n#### HTTP Response\n\nIf passed a response object then the logger will return this with the response code specified in the error (err.resCode). It defaults to sending a 500 server error with the body {error: 'Error'}.\n\n```JavaScript\nvar logErrors   = require('log-errors'),\n    logDev      = logErrors.development;\n\n  // will call res.send(403, {\"error\":\"random\"})\n  logDev({resCode:403, name:\"random\"}, req, res);\n```\n\n\n#### Log Levels\n- Must be one of the 8 unix log levels used in the [Visionmedia Logging Module](https://github.com/visionmedia/log.js).\n- Defaults to 'info' level if not passed one of the 8 listed.\n\n\n### Base Log Class\n- Production and development loggers inherit from this.\n- If app is an eventEmitter then the 'seriousError' evt will be prodcast when using the productionLogger.\n\n```JavaScript\nvar LogClass = function (env, app) {\n    this.env = env;\n    this.app = app;\n};\n```\n\n\n### Development Logger\n- Always prints full error in colored text.\n\n```JavaScript\nvar logDev \t= require('log-errors').development;\nlogDev(new Error('development error msg'));\n```\n\n### Production Logger\n- Will only print error info if error.LogLevel is 3 or below, ie ['error', 'critical', 'alert', 'emergency']\n\n```JavaScript\nvar logProd = require('log-errors').production,\n    err     = newError('some message about the error');\n\nerr.logLevel = 'critical'\nlogProd(err);\n```\n\n\n#### 'seriousError' Evt\n- If error.LogLevel is 3 or below and this.app is an eventEmitter then the 'seriousError' evt will be prodcast when using the productionLogger.\n- It will NOT be broadcast if the error.doNotKill is truthy\n\n```JavaScript\n    if (!err.doNotKill) {\n      appErrorHandler && this.app.emit('seriousError');\n    }\n```\n\n\n## Using in Conjunction with [Custom Errors npm Module](https://github.com/techjacker/custom-errors)\n\n- If your errors inherit from the custom [errors class](https://github.com/techjacker/custom-errors) then the extra error attrs (logLevel, name, message etc) are already added.\n- However, the logger should work fine with the built in base error class too.\n\n```JavaScript\nvar valErr \t\t= require('custom-errors').general.ValidationError,\n\tlogErrors \t= require('log-errors'),\n\tlogProd \t= logErrors.production,\n\tlogDev \t\t= logErrors.development;\n\ntry {\n\tthrow new valErr(\"funky\");\n} catch (e) {\n\tlogDev(e);\n}\n```\n\nOutputs:\n\n```Shell\nError name: Validation\n\nError object:\n\n{ logLevel: 'warn',\n  message: 'funky',\n  name: 'Validation',\n  resCode: 400,\n  [stack]: [Getter/Setter] }\n\nStack trace:\n\n'Validation: funky\n    at Object.<anonymous> (/home/andy/lib/modules/npm/log-errors/lib/development.js:18:12)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Module.runMain (module.js:492:10)\n    at process.startup.processNextTick.process._tickCallback (node.js:244:9)'\n```",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/techjacker/log-errors/issues"
  },
  "homepage": "https://github.com/techjacker/log-errors",
  "_id": "log-errors@4.1.0",
  "_shasum": "3ac96a85d6a5a896aff62c45792f853c8597b8b7",
  "_from": "log-errors@4.1.x",
  "_resolved": "https://registry.npmjs.org/log-errors/-/log-errors-4.1.0.tgz"
}
